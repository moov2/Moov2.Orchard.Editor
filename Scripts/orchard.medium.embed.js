/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var hasInit = false,
        instanceId,
        editorInstance,
        $element, $contentCss;

    /**
     * Add extra paragraph if needed
     */
    var addExtraParagraph = function (value) {
        if(!value || !value.endsWith('</p>')) {
            value = value + '<p><br /></p>';
        }

        return value;
    };

    /**
     * Store DOM elements in variables.
     */
    var cacheDom = function () {
        $element = document.querySelector('.js-editor-medium-element');
        $contentCss = document.querySelector('.js-editor-custom-css');
    };

    var getInstanceId = function () {
        var name = 'instance';
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    };

    var loaded = function () {
        cacheDom();

        if (!hasInit) {
            sendMessage({
                action: 'init',
                id: instanceId
            });
        }
    };

    /**
     * Gets the value.
     */
    var getValue = function () {
        return editorInstance.serialize()[editorInstance.elements[0].id].value;
    };
    
    /**
     * Initialises Medium editor.
     */
    var initialise = function (data) {
        data.value = addExtraParagraph(data.value);
        $element.value = data.value;
        editorInstance = new MediumEditor($element);

        editorInstance.subscribe('editableInput', sendUpdate);

        if ($contentCss.value !== '') {
            editorInstance.elements[0].className += ' ' + $contentCss.value;
        }
        
        editorInstance.elements[0].setAttribute('data-instance-id', instanceId);

        $($element).mediumInsert({
            editor: editorInstance,
            addons: {
                images: false,
                embeds: false,
                orchardMedia: true
            }
        });

        if (editorInstance.elements && editorInstance.elements.length > 0) {
            editorInstance.elements[0].style.display = 'block';
        }

        hasInit = true;
    };

    /**
     * Process message from the parent window.
     */
    
    var onMessage = function (e) {
        var data = JSON.parse(e.data);

        if (data.action === 'update') {
            receivedUpdate(data);
        }
    };

    /**
     * Receives a message from parent window to update value.
     */
    var receivedUpdate = function (data) {
        var isEmpty = data.value === '';

        if (!hasInit) {
            initialise(data);
        }

        data.value = addExtraParagraph(data.value);
        editorInstance.setContent(data.value);

        if (isEmpty) {
            setFocus();
        }
    };

    /**
     * Sends message to parent window.
     */
    var sendMessage = function (msg) {
        window.parent.postMessage(msg, '*');
    };

    /**
     * Sends message to parent window to update value.
     */
    var sendUpdate = function () {
        sendMessage({
            action: 'update',
            id: instanceId,
            value: getValue()
        });
    };

    /**
     * Set focus on medium editor
     */
    var setFocus = function () {
        if(!editorInstance) {
            return;
        }

        editorInstance.selectElement(editorInstance.elements[0]);
        MediumEditor.selection.moveCursor(document, editorInstance.elements[0], 0);
    };

    instanceId = getInstanceId();
    
    document.addEventListener('DOMContentLoaded', loaded);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBoYXNJbml0ID0gZmFsc2UsXHJcbiAgICAgICAgaW5zdGFuY2VJZCxcclxuICAgICAgICBlZGl0b3JJbnN0YW5jZSxcclxuICAgICAgICAkZWxlbWVudCwgJGNvbnRlbnRDc3M7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgZXh0cmEgcGFyYWdyYXBoIGlmIG5lZWRlZFxyXG4gICAgICovXHJcbiAgICB2YXIgYWRkRXh0cmFQYXJhZ3JhcGggPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZighdmFsdWUgfHwgIXZhbHVlLmVuZHNXaXRoKCc8L3A+JykpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICc8cD48YnIgLz48L3A+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBET00gZWxlbWVudHMgaW4gdmFyaWFibGVzLlxyXG4gICAgICovXHJcbiAgICB2YXIgY2FjaGVEb20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZWRpdG9yLW1lZGl1bS1lbGVtZW50Jyk7XHJcbiAgICAgICAgJGNvbnRlbnRDc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZWRpdG9yLWN1c3RvbS1jc3MnKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGdldEluc3RhbmNlSWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5hbWUgPSAnaW5zdGFuY2UnO1xyXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXF0nKTtcclxuICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdbXFxcXD8mXScgKyBuYW1lICsgJz0oW14mI10qKScpO1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gcmVnZXguZXhlYyhsb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRzID09PSBudWxsID8gJycgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBsb2FkZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2FjaGVEb20oKTtcclxuXHJcbiAgICAgICAgaWYgKCFoYXNJbml0KSB7XHJcbiAgICAgICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ2luaXQnLFxyXG4gICAgICAgICAgICAgICAgaWQ6IGluc3RhbmNlSWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGVkaXRvckluc3RhbmNlLnNlcmlhbGl6ZSgpW2VkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLmlkXS52YWx1ZTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGlzZXMgTWVkaXVtIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIGluaXRpYWxpc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGRhdGEudmFsdWUgPSBhZGRFeHRyYVBhcmFncmFwaChkYXRhLnZhbHVlKTtcclxuICAgICAgICAkZWxlbWVudC52YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgZWRpdG9ySW5zdGFuY2UgPSBuZXcgTWVkaXVtRWRpdG9yKCRlbGVtZW50KTtcclxuXHJcbiAgICAgICAgZWRpdG9ySW5zdGFuY2Uuc3Vic2NyaWJlKCdlZGl0YWJsZUlucHV0Jywgc2VuZFVwZGF0ZSk7XHJcblxyXG4gICAgICAgIGlmICgkY29udGVudENzcy52YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgZWRpdG9ySW5zdGFuY2UuZWxlbWVudHNbMF0uY2xhc3NOYW1lICs9ICcgJyArICRjb250ZW50Q3NzLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBlZGl0b3JJbnN0YW5jZS5lbGVtZW50c1swXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5zdGFuY2UtaWQnLCBpbnN0YW5jZUlkKTtcclxuXHJcbiAgICAgICAgJCgkZWxlbWVudCkubWVkaXVtSW5zZXJ0KHtcclxuICAgICAgICAgICAgZWRpdG9yOiBlZGl0b3JJbnN0YW5jZSxcclxuICAgICAgICAgICAgYWRkb25zOiB7XHJcbiAgICAgICAgICAgICAgICBpbWFnZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZW1iZWRzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG9yY2hhcmRNZWRpYTogdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChlZGl0b3JJbnN0YW5jZS5lbGVtZW50cyAmJiBlZGl0b3JJbnN0YW5jZS5lbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGFzSW5pdCA9IHRydWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyBtZXNzYWdlIGZyb20gdGhlIHBhcmVudCB3aW5kb3cuXHJcbiAgICAgKi9cclxuICAgIFxyXG4gICAgdmFyIG9uTWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmFjdGlvbiA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICAgICAgcmVjZWl2ZWRVcGRhdGUoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlY2VpdmVzIGEgbWVzc2FnZSBmcm9tIHBhcmVudCB3aW5kb3cgdG8gdXBkYXRlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICB2YXIgcmVjZWl2ZWRVcGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBpc0VtcHR5ID0gZGF0YS52YWx1ZSA9PT0gJyc7XHJcblxyXG4gICAgICAgIGlmICghaGFzSW5pdCkge1xyXG4gICAgICAgICAgICBpbml0aWFsaXNlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGF0YS52YWx1ZSA9IGFkZEV4dHJhUGFyYWdyYXBoKGRhdGEudmFsdWUpO1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLnNldENvbnRlbnQoZGF0YS52YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChpc0VtcHR5KSB7XHJcbiAgICAgICAgICAgIHNldEZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIG1lc3NhZ2UgdG8gcGFyZW50IHdpbmRvdy5cclxuICAgICAqL1xyXG4gICAgdmFyIHNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UobXNnLCAnKicpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIG1lc3NhZ2UgdG8gcGFyZW50IHdpbmRvdyB0byB1cGRhdGUgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIHZhciBzZW5kVXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgYWN0aW9uOiAndXBkYXRlJyxcclxuICAgICAgICAgICAgaWQ6IGluc3RhbmNlSWQsXHJcbiAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGZvY3VzIG9uIG1lZGl1bSBlZGl0b3JcclxuICAgICAqL1xyXG4gICAgdmFyIHNldEZvY3VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmKCFlZGl0b3JJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlZGl0b3JJbnN0YW5jZS5zZWxlY3RFbGVtZW50KGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdKTtcclxuICAgICAgICBNZWRpdW1FZGl0b3Iuc2VsZWN0aW9uLm1vdmVDdXJzb3IoZG9jdW1lbnQsIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLCAwKTtcclxuICAgIH07XHJcblxyXG4gICAgaW5zdGFuY2VJZCA9IGdldEluc3RhbmNlSWQoKTtcclxuICAgIFxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxvYWRlZCk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uTWVzc2FnZSk7XHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
