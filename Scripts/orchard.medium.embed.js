/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var KEY_ESC = 27;

    var editorInstance,
        $element;

    /**
     * Store DOM elements in variables.
     */
    var cacheDom = function () {
        $element = document.querySelector('.js-editor-medium-element');
    };

    /**
     * Checks if the user has keyed `ESC` to trigger the editor closing.
     */
    var checkKeyPressForHide = function (e) {
        if (e.keyCode === KEY_ESC) {
            hide();
        }
    };

    /**
     * Destroys the instance of medium editor.
     */
    var destroy = function () {
        editorInstance.destroy();
        editorInstance = undefined;

        window.removeEventListener('keydown', checkKeyPressForHide);
    };

    /**
     * Hides the medium editor
     */
    var hide = function () {
        sendMessage({
            action: 'close',
            value: $element.value
        });
    };
    
    /**
     * Initialises Medium editor.
     */
    var initialise = function (data) {
        window.addEventListener('keydown', checkKeyPressForHide);

        $element.value = data.value;
        editorInstance = new MediumEditor($element);
    };

    /**
     * Process message from the parent window.
     */
    var onMessage = function (e) {
        var data = JSON.parse(e.data);

        if (data.action === 'initialise') {
            initialise(data);
        }

        if (data.action === 'destroy') {
            destroy();
        }
    };

    /**
     * Sends message to parent window.
     */
    var sendMessage = function (msg) {
        window.parent.postMessage(msg, '*');
    };
    
    document.addEventListener('DOMContentLoaded', cacheDom);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoib3JjaGFyZC5tZWRpdW0uZW1iZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIEtFWV9FU0MgPSAyNztcclxuXHJcbiAgICB2YXIgZWRpdG9ySW5zdGFuY2UsXHJcbiAgICAgICAgJGVsZW1lbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBET00gZWxlbWVudHMgaW4gdmFyaWFibGVzLlxyXG4gICAgICovXHJcbiAgICB2YXIgY2FjaGVEb20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZWRpdG9yLW1lZGl1bS1lbGVtZW50Jyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIHRoZSB1c2VyIGhhcyBrZXllZCBgRVNDYCB0byB0cmlnZ2VyIHRoZSBlZGl0b3IgY2xvc2luZy5cclxuICAgICAqL1xyXG4gICAgdmFyIGNoZWNrS2V5UHJlc3NGb3JIaWRlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlfRVNDKSB7XHJcbiAgICAgICAgICAgIGhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIG1lZGl1bSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLmRlc3Ryb3koKTtcclxuICAgICAgICBlZGl0b3JJbnN0YW5jZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjaGVja0tleVByZXNzRm9ySGlkZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZXMgdGhlIG1lZGl1bSBlZGl0b3JcclxuICAgICAqL1xyXG4gICAgdmFyIGhpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBhY3Rpb246ICdjbG9zZScsXHJcbiAgICAgICAgICAgIHZhbHVlOiAkZWxlbWVudC52YWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXNlcyBNZWRpdW0gZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICB2YXIgaW5pdGlhbGlzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjaGVja0tleVByZXNzRm9ySGlkZSk7XHJcblxyXG4gICAgICAgICRlbGVtZW50LnZhbHVlID0gZGF0YS52YWx1ZTtcclxuICAgICAgICBlZGl0b3JJbnN0YW5jZSA9IG5ldyBNZWRpdW1FZGl0b3IoJGVsZW1lbnQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgbWVzc2FnZSBmcm9tIHRoZSBwYXJlbnQgd2luZG93LlxyXG4gICAgICovXHJcbiAgICB2YXIgb25NZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuYWN0aW9uID09PSAnaW5pdGlhbGlzZScpIHtcclxuICAgICAgICAgICAgaW5pdGlhbGlzZShkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmFjdGlvbiA9PT0gJ2Rlc3Ryb3knKSB7XHJcbiAgICAgICAgICAgIGRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZSB0byBwYXJlbnQgd2luZG93LlxyXG4gICAgICovXHJcbiAgICB2YXIgc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShtc2csICcqJyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgY2FjaGVEb20pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
