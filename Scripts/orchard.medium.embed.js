/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var KEY_ESC = 27,
        UPLOAD_MEDIA_URL = '/Admin/Editor/Media';

    var editorInstance,
        $element, $applyBtn, $discardBtn, $state;

    /**
     * Apply changes and hide editor.
     */
    var apply = function () {
        sendMessage({
            action: 'apply',
            value: getValue()
        });
    };

    /**
     * Store DOM elements in variables.
     */
    var cacheDom = function () {
        $element = document.querySelector('.js-editor-medium-element');
        $applyBtn = document.querySelector('.js-apply-changes');
        $discardBtn = document.querySelector('.js-discard-changes');
        $state = document.querySelector('.js-state');
    };

    /**
     * Checks if the user has keyed `ESC` to trigger the editor closing.
     */
    var checkKeyPressForHide = function (e) {
        if (e.keyCode === KEY_ESC) {
            apply();
        }
    };

    /**
     * Destroys the instance of medium editor.
     */
    var destroy = function () {
        editorInstance.destroy();
        editorInstance = undefined;

        window.removeEventListener('keydown', checkKeyPressForHide);
    };

    /**
     * Sends message to parent to discard the changes and close the editor.
     */
    var discard = function () {
        sendMessage({
            action: 'discard',
            value: getValue()
        });
    }

    /**
     * Gets the value.
     */
    var getValue = function () {
        return editorInstance.serialize()[editorInstance.elements[0].id].value;
    };
    
    /**
     * Initialises Medium editor.
     */
    var initialise = function (data) {
        window.addEventListener('keydown', checkKeyPressForHide);
        $applyBtn.addEventListener('click', apply)
        $discardBtn.addEventListener('click', discard)

        $state.innerHTML = data.state;
        $element.value = data.value;
        editorInstance = new MediumEditor($element);

        $($element).mediumInsert({
            editor: editorInstance,
            addons: {
                images: false,
                embeds: false,
                orchardMedia: true
            }
        });
    };

    /**
     * Process message from the parent window.
     */
    var onMessage = function (e) {
        var data = JSON.parse(e.data);

        if (data.action === 'initialise') {
            initialise(data);
        }

        if (data.action === 'destroy') {
            destroy();
        }
    };

    /**
     * Sends message to parent window.
     */
    var sendMessage = function (msg) {
        window.parent.postMessage(msg, '*');
    };
    
    document.addEventListener('DOMContentLoaded', cacheDom);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoib3JjaGFyZC5tZWRpdW0uZW1iZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIEtFWV9FU0MgPSAyNyxcclxuICAgICAgICBVUExPQURfTUVESUFfVVJMID0gJy9BZG1pbi9FZGl0b3IvTWVkaWEnO1xyXG5cclxuICAgIHZhciBlZGl0b3JJbnN0YW5jZSxcclxuICAgICAgICAkZWxlbWVudCwgJGFwcGx5QnRuLCAkZGlzY2FyZEJ0biwgJHN0YXRlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgY2hhbmdlcyBhbmQgaGlkZSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBhcHBseSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgIGFjdGlvbjogJ2FwcGx5JyxcclxuICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKClcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBET00gZWxlbWVudHMgaW4gdmFyaWFibGVzLlxyXG4gICAgICovXHJcbiAgICB2YXIgY2FjaGVEb20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZWRpdG9yLW1lZGl1bS1lbGVtZW50Jyk7XHJcbiAgICAgICAgJGFwcGx5QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWFwcGx5LWNoYW5nZXMnKTtcclxuICAgICAgICAkZGlzY2FyZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kaXNjYXJkLWNoYW5nZXMnKTtcclxuICAgICAgICAkc3RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc3RhdGUnKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlIHVzZXIgaGFzIGtleWVkIGBFU0NgIHRvIHRyaWdnZXIgdGhlIGVkaXRvciBjbG9zaW5nLlxyXG4gICAgICovXHJcbiAgICB2YXIgY2hlY2tLZXlQcmVzc0ZvckhpZGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IEtFWV9FU0MpIHtcclxuICAgICAgICAgICAgYXBwbHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIG1lZGl1bSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLmRlc3Ryb3koKTtcclxuICAgICAgICBlZGl0b3JJbnN0YW5jZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjaGVja0tleVByZXNzRm9ySGlkZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZSB0byBwYXJlbnQgdG8gZGlzY2FyZCB0aGUgY2hhbmdlcyBhbmQgY2xvc2UgdGhlIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIGRpc2NhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBhY3Rpb246ICdkaXNjYXJkJyxcclxuICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGVkaXRvckluc3RhbmNlLnNlcmlhbGl6ZSgpW2VkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLmlkXS52YWx1ZTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGlzZXMgTWVkaXVtIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIGluaXRpYWxpc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2hlY2tLZXlQcmVzc0ZvckhpZGUpO1xyXG4gICAgICAgICRhcHBseUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFwcGx5KVxyXG4gICAgICAgICRkaXNjYXJkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlzY2FyZClcclxuXHJcbiAgICAgICAgJHN0YXRlLmlubmVySFRNTCA9IGRhdGEuc3RhdGU7XHJcbiAgICAgICAgJGVsZW1lbnQudmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlID0gbmV3IE1lZGl1bUVkaXRvcigkZWxlbWVudCk7XHJcblxyXG4gICAgICAgICQoJGVsZW1lbnQpLm1lZGl1bUluc2VydCh7XHJcbiAgICAgICAgICAgIGVkaXRvcjogZWRpdG9ySW5zdGFuY2UsXHJcbiAgICAgICAgICAgIGFkZG9uczoge1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGVtYmVkczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBvcmNoYXJkTWVkaWE6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgbWVzc2FnZSBmcm9tIHRoZSBwYXJlbnQgd2luZG93LlxyXG4gICAgICovXHJcbiAgICB2YXIgb25NZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuYWN0aW9uID09PSAnaW5pdGlhbGlzZScpIHtcclxuICAgICAgICAgICAgaW5pdGlhbGlzZShkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmFjdGlvbiA9PT0gJ2Rlc3Ryb3knKSB7XHJcbiAgICAgICAgICAgIGRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZSB0byBwYXJlbnQgd2luZG93LlxyXG4gICAgICovXHJcbiAgICB2YXIgc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShtc2csICcqJyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgY2FjaGVEb20pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
