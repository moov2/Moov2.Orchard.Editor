/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var hasInit = false,
        instanceId,
        editorInstance,
        $element, $contentCss;

    /**
     * Add extra paragraph if needed
     */
    var addExtraParagraph = function (value) {
        if (!value || !value.endsWith('</p>')) {
            value = value + '<p><br /></p>';
        }

        return value;
    };

    /**
     * Store DOM elements in variables.
     */
    var cacheDom = function () {
        $element = document.querySelector('.js-editor-medium-element');
        $contentCss = document.querySelector('.js-editor-custom-css');
    };

    var getInstanceId = function () {
        var name = 'instance';
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    };

    var loaded = function () {
        cacheDom();

        if (!hasInit) {
            sendMessage({
                action: 'init',
                id: instanceId
            });
        }
    };

    /**
     * Gets the value.
     */
    var getValue = function () {
        var value = editorInstance.serialize()[editorInstance.elements[0].id].value,
            replace = '<p><br></p>';

        if (value.substring(value.length - replace.length, value.length) === replace) {
            value = value.substring(0, value.length - replace.length);
        }

        return value;
    };
    
    /**
     * Initialises Medium editor.
     */
    var initialise = function (data) {
        data.value = addExtraParagraph(data.value);
        $element.value = data.value;
        editorInstance = new MediumEditor($element);

        editorInstance.subscribe('editableInput', sendUpdate);

        if ($contentCss.value !== '') {
            editorInstance.elements[0].className += ' ' + $contentCss.value;
        }
        
        editorInstance.elements[0].setAttribute('data-instance-id', instanceId);

        $($element).mediumInsert({
            editor: editorInstance,
            addons: {
                images: false,
                embeds: false,
                orchardMedia: true
            }
        });

        if (editorInstance.elements && editorInstance.elements.length > 0) {
            editorInstance.elements[0].style.display = 'block';
        }

        hasInit = true;
    };

    /**
     * Process message from the parent window.
     */
    
    var onMessage = function (e) {
        var data = JSON.parse(e.data);

        if (data.action === 'update') {
            receivedUpdate(data);
        }
    };

    /**
     * Receives a message from parent window to update value.
     */
    var receivedUpdate = function (data) {
        var isEmpty = data.value === '',
            isInitialUpdate = !hasInit;

        if (!hasInit) {
            initialise(data);
        }

        data.value = addExtraParagraph(data.value);
        editorInstance.setContent(data.value);

        if (isEmpty && !isInitialUpdate) {
            setFocus();
        }
    };

    /**
     * Sends message to parent window.
     */
    var sendMessage = function (msg) {
        window.parent.postMessage(msg, '*');
    };

    /**
     * Sends message to parent window to update value.
     */
    var sendUpdate = function () {
        sendMessage({
            action: 'update',
            id: instanceId,
            value: getValue()
        });
    };

    /**
     * Set focus on medium editor
     */
    var setFocus = function () {
        if(!editorInstance) {
            return;
        }

        editorInstance.selectElement(editorInstance.elements[0]);
        MediumEditor.selection.moveCursor(document, editorInstance.elements[0], 0);
    };

    instanceId = getInstanceId();
    
    document.addEventListener('DOMContentLoaded', loaded);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoib3JjaGFyZC5tZWRpdW0uZW1iZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGhhc0luaXQgPSBmYWxzZSxcclxuICAgICAgICBpbnN0YW5jZUlkLFxyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLFxyXG4gICAgICAgICRlbGVtZW50LCAkY29udGVudENzcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBleHRyYSBwYXJhZ3JhcGggaWYgbmVlZGVkXHJcbiAgICAgKi9cclxuICAgIHZhciBhZGRFeHRyYVBhcmFncmFwaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmKCF2YWx1ZSB8fCAhdmFsdWUuZW5kc1dpdGgoJzwvcD4nKSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgJzxwPjxiciAvPjwvcD4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0b3JlIERPTSBlbGVtZW50cyBpbiB2YXJpYWJsZXMuXHJcbiAgICAgKi9cclxuICAgIHZhciBjYWNoZURvbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0b3ItbWVkaXVtLWVsZW1lbnQnKTtcclxuICAgICAgICAkY29udGVudENzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0b3ItY3VzdG9tLWNzcycpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ2V0SW5zdGFuY2VJZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmFtZSA9ICdpbnN0YW5jZSc7XHJcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXScpO1xyXG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ1tcXFxcPyZdJyArIG5hbWUgKyAnPShbXiYjXSopJyk7XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyAnJyA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjYWNoZURvbSgpO1xyXG5cclxuICAgICAgICBpZiAoIWhhc0luaXQpIHtcclxuICAgICAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnaW5pdCcsXHJcbiAgICAgICAgICAgICAgICBpZDogaW5zdGFuY2VJZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZWRpdG9ySW5zdGFuY2Uuc2VyaWFsaXplKClbZWRpdG9ySW5zdGFuY2UuZWxlbWVudHNbMF0uaWRdLnZhbHVlO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXNlcyBNZWRpdW0gZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICB2YXIgaW5pdGlhbGlzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgZGF0YS52YWx1ZSA9IGFkZEV4dHJhUGFyYWdyYXBoKGRhdGEudmFsdWUpO1xyXG4gICAgICAgICRlbGVtZW50LnZhbHVlID0gZGF0YS52YWx1ZTtcclxuICAgICAgICBlZGl0b3JJbnN0YW5jZSA9IG5ldyBNZWRpdW1FZGl0b3IoJGVsZW1lbnQpO1xyXG5cclxuICAgICAgICBlZGl0b3JJbnN0YW5jZS5zdWJzY3JpYmUoJ2VkaXRhYmxlSW5wdXQnLCBzZW5kVXBkYXRlKTtcclxuXHJcbiAgICAgICAgaWYgKCRjb250ZW50Q3NzLnZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICBlZGl0b3JJbnN0YW5jZS5lbGVtZW50c1swXS5jbGFzc05hbWUgKz0gJyAnICsgJGNvbnRlbnRDc3MudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLnNldEF0dHJpYnV0ZSgnZGF0YS1pbnN0YW5jZS1pZCcsIGluc3RhbmNlSWQpO1xyXG5cclxuICAgICAgICAkKCRlbGVtZW50KS5tZWRpdW1JbnNlcnQoe1xyXG4gICAgICAgICAgICBlZGl0b3I6IGVkaXRvckluc3RhbmNlLFxyXG4gICAgICAgICAgICBhZGRvbnM6IHtcclxuICAgICAgICAgICAgICAgIGltYWdlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBlbWJlZHM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgb3JjaGFyZE1lZGlhOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGVkaXRvckluc3RhbmNlLmVsZW1lbnRzICYmIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZWRpdG9ySW5zdGFuY2UuZWxlbWVudHNbMF0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoYXNJbml0ID0gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIG1lc3NhZ2UgZnJvbSB0aGUgcGFyZW50IHdpbmRvdy5cclxuICAgICAqL1xyXG4gICAgXHJcbiAgICB2YXIgb25NZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuYWN0aW9uID09PSAndXBkYXRlJykge1xyXG4gICAgICAgICAgICByZWNlaXZlZFVwZGF0ZShkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVjZWl2ZXMgYSBtZXNzYWdlIGZyb20gcGFyZW50IHdpbmRvdyB0byB1cGRhdGUgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIHZhciByZWNlaXZlZFVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdmFyIGlzRW1wdHkgPSBkYXRhLnZhbHVlID09PSAnJyxcclxuICAgICAgICAgICAgaXNJbml0aWFsVXBkYXRlID0gIWhhc0luaXQ7XHJcblxyXG4gICAgICAgIGlmICghaGFzSW5pdCkge1xyXG4gICAgICAgICAgICBpbml0aWFsaXNlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGF0YS52YWx1ZSA9IGFkZEV4dHJhUGFyYWdyYXBoKGRhdGEudmFsdWUpO1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLnNldENvbnRlbnQoZGF0YS52YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChpc0VtcHR5ICYmICFpc0luaXRpYWxVcGRhdGUpIHtcclxuICAgICAgICAgICAgc2V0Rm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZSB0byBwYXJlbnQgd2luZG93LlxyXG4gICAgICovXHJcbiAgICB2YXIgc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShtc2csICcqJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZSB0byBwYXJlbnQgd2luZG93IHRvIHVwZGF0ZSB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgdmFyIHNlbmRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBhY3Rpb246ICd1cGRhdGUnLFxyXG4gICAgICAgICAgICBpZDogaW5zdGFuY2VJZCxcclxuICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKClcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgZm9jdXMgb24gbWVkaXVtIGVkaXRvclxyXG4gICAgICovXHJcbiAgICB2YXIgc2V0Rm9jdXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYoIWVkaXRvckluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLnNlbGVjdEVsZW1lbnQoZWRpdG9ySW5zdGFuY2UuZWxlbWVudHNbMF0pO1xyXG4gICAgICAgIE1lZGl1bUVkaXRvci5zZWxlY3Rpb24ubW92ZUN1cnNvcihkb2N1bWVudCwgZWRpdG9ySW5zdGFuY2UuZWxlbWVudHNbMF0sIDApO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbnN0YW5jZUlkID0gZ2V0SW5zdGFuY2VJZCgpO1xyXG4gICAgXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbG9hZGVkKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25NZXNzYWdlKTtcclxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
