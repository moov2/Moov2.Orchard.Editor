/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var KEY_ESC = 27,
        UPLOAD_MEDIA_URL = '/Admin/Editor/Media';

    var editorInstance,
        $element, $closeBtn, $state, $contentCss;

    /**
     * Hides thed editor.
     */
    var close = function () {
        sendMessage({
            action: 'close',
            value: getValue()
        });
    };

    /**
     * Store DOM elements in variables.
     */
    var cacheDom = function () {
        $element = document.querySelector('.js-editor-medium-element');
        $closeBtn = document.querySelector('.js-close-btn');
        $state = document.querySelector('.js-state');
        $contentCss = document.querySelector('.js-editor-custom-css');
    };

    /**
     * Checks if the user has keyed `ESC` to trigger the editor closing.
     */
    var checkKeyPressForHide = function (e) {
        if (e.keyCode === KEY_ESC) {
            close();
        }
    };

    /**
     * Destroys the instance of medium editor.
     */
    var destroy = function () {
        editorInstance.destroy();
        editorInstance = undefined;

        window.removeEventListener('keydown', checkKeyPressForHide);
    };

    /**
     * Gets the value.
     */
    var getValue = function () {
        return editorInstance.serialize()[editorInstance.elements[0].id].value;
    };
    
    /**
     * Initialises Medium editor.
     */
    var initialise = function (data) {
        window.addEventListener('keydown', checkKeyPressForHide);
        $closeBtn.addEventListener('click', close)

        $state.innerHTML = data.state;
        $element.value = data.value;
        editorInstance = new MediumEditor($element);

        editorInstance.subscribe('editableInput', update);

        if ($contentCss.value !== '') {
            editorInstance.elements[0].className += ' ' + $contentCss.value;
        }

        $($element).mediumInsert({
            editor: editorInstance,
            addons: {
                images: false,
                embeds: false,
                orchardMedia: true
            }
        });
    };

    /**
     * Process message from the parent window.
     */
    var onMessage = function (e) {
        var data = JSON.parse(e.data);

        if (data.action === 'initialise') {
            initialise(data);
        }

        if (data.action === 'destroy') {
            destroy();
        }
    };

    /**
     * Sends message to parent window.
     */
    var sendMessage = function (msg) {
        window.parent.postMessage(msg, '*');
    };

    /**
     * Sends message to parent window to update value.
     */
    var update = function () {
        sendMessage({
            action: 'update',
            value: getValue()
        });
    };
    
    document.addEventListener('DOMContentLoaded', cacheDom);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBLRVlfRVNDID0gMjcsXHJcbiAgICAgICAgVVBMT0FEX01FRElBX1VSTCA9ICcvQWRtaW4vRWRpdG9yL01lZGlhJztcclxuXHJcbiAgICB2YXIgZWRpdG9ySW5zdGFuY2UsXHJcbiAgICAgICAgJGVsZW1lbnQsICRjbG9zZUJ0biwgJHN0YXRlLCAkY29udGVudENzcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZGVzIHRoZWQgZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICB2YXIgY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBhY3Rpb246ICdjbG9zZScsXHJcbiAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcmUgRE9NIGVsZW1lbnRzIGluIHZhcmlhYmxlcy5cclxuICAgICAqL1xyXG4gICAgdmFyIGNhY2hlRG9tID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVkaXRvci1tZWRpdW0tZWxlbWVudCcpO1xyXG4gICAgICAgICRjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jbG9zZS1idG4nKTtcclxuICAgICAgICAkc3RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc3RhdGUnKTtcclxuICAgICAgICAkY29udGVudENzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0b3ItY3VzdG9tLWNzcycpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiB0aGUgdXNlciBoYXMga2V5ZWQgYEVTQ2AgdG8gdHJpZ2dlciB0aGUgZWRpdG9yIGNsb3NpbmcuXHJcbiAgICAgKi9cclxuICAgIHZhciBjaGVja0tleVByZXNzRm9ySGlkZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gS0VZX0VTQykge1xyXG4gICAgICAgICAgICBjbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgbWVkaXVtIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZWRpdG9ySW5zdGFuY2UuZGVzdHJveSgpO1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGNoZWNrS2V5UHJlc3NGb3JIaWRlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBlZGl0b3JJbnN0YW5jZS5zZXJpYWxpemUoKVtlZGl0b3JJbnN0YW5jZS5lbGVtZW50c1swXS5pZF0udmFsdWU7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpc2VzIE1lZGl1bSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBpbml0aWFsaXNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGNoZWNrS2V5UHJlc3NGb3JIaWRlKTtcclxuICAgICAgICAkY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZSlcclxuXHJcbiAgICAgICAgJHN0YXRlLmlubmVySFRNTCA9IGRhdGEuc3RhdGU7XHJcbiAgICAgICAgJGVsZW1lbnQudmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlID0gbmV3IE1lZGl1bUVkaXRvcigkZWxlbWVudCk7XHJcblxyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLnN1YnNjcmliZSgnZWRpdGFibGVJbnB1dCcsIHVwZGF0ZSk7XHJcblxyXG4gICAgICAgIGlmICgkY29udGVudENzcy52YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgZWRpdG9ySW5zdGFuY2UuZWxlbWVudHNbMF0uY2xhc3NOYW1lICs9ICcgJyArICRjb250ZW50Q3NzLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCgkZWxlbWVudCkubWVkaXVtSW5zZXJ0KHtcclxuICAgICAgICAgICAgZWRpdG9yOiBlZGl0b3JJbnN0YW5jZSxcclxuICAgICAgICAgICAgYWRkb25zOiB7XHJcbiAgICAgICAgICAgICAgICBpbWFnZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZW1iZWRzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG9yY2hhcmRNZWRpYTogdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyBtZXNzYWdlIGZyb20gdGhlIHBhcmVudCB3aW5kb3cuXHJcbiAgICAgKi9cclxuICAgIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShlLmRhdGEpO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS5hY3Rpb24gPT09ICdpbml0aWFsaXNlJykge1xyXG4gICAgICAgICAgICBpbml0aWFsaXNlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEuYWN0aW9uID09PSAnZGVzdHJveScpIHtcclxuICAgICAgICAgICAgZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBtZXNzYWdlIHRvIHBhcmVudCB3aW5kb3cuXHJcbiAgICAgKi9cclxuICAgIHZhciBzZW5kTWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKG1zZywgJyonKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBtZXNzYWdlIHRvIHBhcmVudCB3aW5kb3cgdG8gdXBkYXRlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgYWN0aW9uOiAndXBkYXRlJyxcclxuICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKClcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYWNoZURvbSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uTWVzc2FnZSk7XHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
