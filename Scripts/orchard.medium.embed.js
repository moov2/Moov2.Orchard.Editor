/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var KEY_ESC = 27,
        UPLOAD_MEDIA_URL = '/Admin/Editor/Media';

    var hasInit = false,
        editorInstance, instanceId,
        $element, $contentCss;

    /**
     * Add extra paragraph if needed
     */
    var addExtraParagraph = function (value) {
        if(!value || !value.endsWith('</p>')) {
            value = value + '<p><br /></p>';
        }

        return value;
    };

    /**
     * Store DOM elements in variables.
     */
    var cacheDom = function () {
        $element = document.querySelector('.js-editor-medium-element');
        $contentCss = document.querySelector('.js-editor-custom-css');
    };

    var loaded = function () {
        cacheDom();

        if (!hasInit) {
            sendMessage({
                action: 'init',
                id: instanceId
            });
        }
    };

    /**
     * Gets the value.
     */
    var getValue = function () {
        return editorInstance.serialize()[editorInstance.elements[0].id].value;
    };
    
    /**
     * Initialises Medium editor.
     */
    var initialise = function (data) {
        data.value = addExtraParagraph(data.value);
        $element.value = data.value;
        editorInstance = new MediumEditor($element);

        editorInstance.subscribe('editableInput', sendUpdate);

        if ($contentCss.value !== '') {
            editorInstance.elements[0].className += ' ' + $contentCss.value;
        }

        editorInstance.elements[0].setAttribute('data-instance-id', instanceId);

        $($element).mediumInsert({
            editor: editorInstance,
            addons: {
                images: false,
                embeds: false,
                orchardMedia: true
            }
        });

        if (editorInstance.elements && editorInstance.elements.length > 0) {
            editorInstance.elements[0].style.display = 'block';
        }

        hasInit = true;
    };

    /**
     * Process message from the parent window.
     */
    
    var onMessage = function (e) {
        var data = JSON.parse(e.data);

        instanceId = data.id;

        if (data.action === 'update') {
            receivedUpdate(data);
        }
    };

    /**
     * Receives a message from parent window to update value.
     */
    var receivedUpdate = function (data) {
        var isEmpty = data.value === '';

        if (!hasInit) {
            initialise(data);
        }

        data.value = addExtraParagraph(data.value);
        editorInstance.setContent(data.value);

        if (isEmpty) {
            setFocus();
        }
    };

    /**
     * Sends message to parent window.
     */
    var sendMessage = function (msg) {
        window.parent.postMessage(msg, '*');
    };

    /**
     * Sends message to parent window to update value.
     */
    var sendUpdate = function () {
        sendMessage({
            action: 'update',
            id: instanceId,
            value: getValue()
        });
    };

    /**
     * Set focus on medium editor
     */
    var setFocus = function () {
        if(!editorInstance) {
            return;
        }

        editorInstance.selectElement(editorInstance.elements[0]);
        MediumEditor.selection.moveCursor(document, editorInstance.elements[0], 0);
    };
    
    document.addEventListener('DOMContentLoaded', loaded);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im9yY2hhcmQubWVkaXVtLmVtYmVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBLRVlfRVNDID0gMjcsXHJcbiAgICAgICAgVVBMT0FEX01FRElBX1VSTCA9ICcvQWRtaW4vRWRpdG9yL01lZGlhJztcclxuXHJcbiAgICB2YXIgaGFzSW5pdCA9IGZhbHNlLFxyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLCBpbnN0YW5jZUlkLFxyXG4gICAgICAgICRlbGVtZW50LCAkY29udGVudENzcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBleHRyYSBwYXJhZ3JhcGggaWYgbmVlZGVkXHJcbiAgICAgKi9cclxuICAgIHZhciBhZGRFeHRyYVBhcmFncmFwaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmKCF2YWx1ZSB8fCAhdmFsdWUuZW5kc1dpdGgoJzwvcD4nKSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgJzxwPjxiciAvPjwvcD4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0b3JlIERPTSBlbGVtZW50cyBpbiB2YXJpYWJsZXMuXHJcbiAgICAgKi9cclxuICAgIHZhciBjYWNoZURvbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0b3ItbWVkaXVtLWVsZW1lbnQnKTtcclxuICAgICAgICAkY29udGVudENzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0b3ItY3VzdG9tLWNzcycpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbG9hZGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNhY2hlRG9tKCk7XHJcblxyXG4gICAgICAgIGlmICghaGFzSW5pdCkge1xyXG4gICAgICAgICAgICBzZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdpbml0JyxcclxuICAgICAgICAgICAgICAgIGlkOiBpbnN0YW5jZUlkXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBlZGl0b3JJbnN0YW5jZS5zZXJpYWxpemUoKVtlZGl0b3JJbnN0YW5jZS5lbGVtZW50c1swXS5pZF0udmFsdWU7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpc2VzIE1lZGl1bSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBpbml0aWFsaXNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBkYXRhLnZhbHVlID0gYWRkRXh0cmFQYXJhZ3JhcGgoZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgJGVsZW1lbnQudmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlID0gbmV3IE1lZGl1bUVkaXRvcigkZWxlbWVudCk7XHJcblxyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLnN1YnNjcmliZSgnZWRpdGFibGVJbnB1dCcsIHNlbmRVcGRhdGUpO1xyXG5cclxuICAgICAgICBpZiAoJGNvbnRlbnRDc3MudmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLmNsYXNzTmFtZSArPSAnICcgKyAkY29udGVudENzcy52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLnNldEF0dHJpYnV0ZSgnZGF0YS1pbnN0YW5jZS1pZCcsIGluc3RhbmNlSWQpO1xyXG5cclxuICAgICAgICAkKCRlbGVtZW50KS5tZWRpdW1JbnNlcnQoe1xyXG4gICAgICAgICAgICBlZGl0b3I6IGVkaXRvckluc3RhbmNlLFxyXG4gICAgICAgICAgICBhZGRvbnM6IHtcclxuICAgICAgICAgICAgICAgIGltYWdlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBlbWJlZHM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgb3JjaGFyZE1lZGlhOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGVkaXRvckluc3RhbmNlLmVsZW1lbnRzICYmIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZWRpdG9ySW5zdGFuY2UuZWxlbWVudHNbMF0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoYXNJbml0ID0gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIG1lc3NhZ2UgZnJvbSB0aGUgcGFyZW50IHdpbmRvdy5cclxuICAgICAqL1xyXG4gICAgXHJcbiAgICB2YXIgb25NZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2VJZCA9IGRhdGEuaWQ7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmFjdGlvbiA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICAgICAgcmVjZWl2ZWRVcGRhdGUoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlY2VpdmVzIGEgbWVzc2FnZSBmcm9tIHBhcmVudCB3aW5kb3cgdG8gdXBkYXRlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICB2YXIgcmVjZWl2ZWRVcGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBpc0VtcHR5ID0gZGF0YS52YWx1ZSA9PT0gJyc7XHJcblxyXG4gICAgICAgIGlmICghaGFzSW5pdCkge1xyXG4gICAgICAgICAgICBpbml0aWFsaXNlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGF0YS52YWx1ZSA9IGFkZEV4dHJhUGFyYWdyYXBoKGRhdGEudmFsdWUpO1xyXG4gICAgICAgIGVkaXRvckluc3RhbmNlLnNldENvbnRlbnQoZGF0YS52YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChpc0VtcHR5KSB7XHJcbiAgICAgICAgICAgIHNldEZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIG1lc3NhZ2UgdG8gcGFyZW50IHdpbmRvdy5cclxuICAgICAqL1xyXG4gICAgdmFyIHNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UobXNnLCAnKicpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIG1lc3NhZ2UgdG8gcGFyZW50IHdpbmRvdyB0byB1cGRhdGUgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIHZhciBzZW5kVXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgYWN0aW9uOiAndXBkYXRlJyxcclxuICAgICAgICAgICAgaWQ6IGluc3RhbmNlSWQsXHJcbiAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGZvY3VzIG9uIG1lZGl1bSBlZGl0b3JcclxuICAgICAqL1xyXG4gICAgdmFyIHNldEZvY3VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmKCFlZGl0b3JJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlZGl0b3JJbnN0YW5jZS5zZWxlY3RFbGVtZW50KGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdKTtcclxuICAgICAgICBNZWRpdW1FZGl0b3Iuc2VsZWN0aW9uLm1vdmVDdXJzb3IoZG9jdW1lbnQsIGVkaXRvckluc3RhbmNlLmVsZW1lbnRzWzBdLCAwKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsb2FkZWQpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
