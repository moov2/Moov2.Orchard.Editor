/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var editor, session, $input;

    /**
     * Filters out unwanted annotations (e.g. warning about doctype) due to common
     * case is the HTML being edited is not a full HTML document but a piece of HTML.
     */
    var filterAnnotation = function () {
        var annotations = session.getAnnotations() || [], i = len = annotations.length;

        while (i--) {
            if (/doctype first\. Expected/.test(annotations[i].text)) {
                annotations.splice(i, 1);
            }
        }

        if (len > annotations.length) {
            session.setAnnotations(annotations);
        }
    };

    /**
     * Initialises Ace editor.
     */
    var initialise = function () {
        editor = ace.edit('editor');
        session = editor.getSession();
        $input = document.querySelector('.editor-input');

        editor.setTheme('ace/theme/monokai');
        editor.setShowPrintMargin(false);

        session.setMode('ace/mode/html');
        session.setUseWrapMode(true);

        session.on('changeAnnotation', filterAnnotation);
        session.on('change', update);

        window.addEventListener('editor:valueUpdate', updateSession);
    };
    
    /**
     * Updates hidden HTML input with latest content from Ace editor.
     */
    var update = function () {
        $input.value = session.getValue();
    };

    var updateSession = function () {
        session.setValue($input.value);
    };

    document.addEventListener('DOMContentLoaded', initialise);
})();
(function () {
    var KEY_ESC = 27;
    var $editor, $iframe;

    /**
     * Checks if the user has keyed `ESC` to trigger the editor closing.
     */
    var checkKeyPressForHide = function (e) {
        if (e.keyCode === KEY_ESC) {
            hide();
        }
    };

    /**
     * Launches the medium editor.
     */
    var hide = function () {
        sendMessage({ action: 'destroy' });

        $editor.style.display = 'none';

        window.removeEventListener('keydown', checkKeyPressForHide);
    };

    /**
     * Initialises Medium editor.
     */
    var initialise = function () {
        $editor = document.querySelector('.js-editor-medium');
        $input = document.querySelector('.editor-input');
        $iframe = document.querySelector('.js-editor-medium-iframe');

        document.querySelector('.js-launch-medium-editor').addEventListener('click', show);
    };

    /**
     * Received a message from the iframe editor.
     */
    var onMessage = function (e) {
        if (e.data.action === 'close') {
            $input.value = e.data.value;
            window.dispatchEvent(new Event('editor:valueUpdate'));

            hide();
        }
    };

    /**
     * Sends a message to the iframe.
     */
    var sendMessage = function (msg) {
        $iframe.contentWindow.postMessage(JSON.stringify(msg), '*');
    };

    /**
     * Launches the medium editor.
     */
    var show = function () {
        window.addEventListener('keydown', checkKeyPressForHide);

        // send information to iframe.
        sendMessage({
            action: 'initialise',
            value: $input.value
        });

        $editor.style.display = '';
    };

    document.addEventListener('DOMContentLoaded', initialise);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQuZWRpdG9yLmpzIiwib3JjaGFyZC5hY2UuanMiLCJvcmNoYXJkLm1lZGl1bS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im9yY2hhcmQuZWRpdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGVkaXRvciwgc2Vzc2lvbiwgJGlucHV0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlsdGVycyBvdXQgdW53YW50ZWQgYW5ub3RhdGlvbnMgKGUuZy4gd2FybmluZyBhYm91dCBkb2N0eXBlKSBkdWUgdG8gY29tbW9uXHJcbiAgICAgKiBjYXNlIGlzIHRoZSBIVE1MIGJlaW5nIGVkaXRlZCBpcyBub3QgYSBmdWxsIEhUTUwgZG9jdW1lbnQgYnV0IGEgcGllY2Ugb2YgSFRNTC5cclxuICAgICAqL1xyXG4gICAgdmFyIGZpbHRlckFubm90YXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFubm90YXRpb25zID0gc2Vzc2lvbi5nZXRBbm5vdGF0aW9ucygpIHx8IFtdLCBpID0gbGVuID0gYW5ub3RhdGlvbnMubGVuZ3RoO1xyXG5cclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIGlmICgvZG9jdHlwZSBmaXJzdFxcLiBFeHBlY3RlZC8udGVzdChhbm5vdGF0aW9uc1tpXS50ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGVuID4gYW5ub3RhdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uc2V0QW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXNlcyBBY2UgZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICB2YXIgaW5pdGlhbGlzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBlZGl0b3IgPSBhY2UuZWRpdCgnZWRpdG9yJyk7XHJcbiAgICAgICAgc2Vzc2lvbiA9IGVkaXRvci5nZXRTZXNzaW9uKCk7XHJcbiAgICAgICAgJGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXRvci1pbnB1dCcpO1xyXG5cclxuICAgICAgICBlZGl0b3Iuc2V0VGhlbWUoJ2FjZS90aGVtZS9tb25va2FpJyk7XHJcbiAgICAgICAgZWRpdG9yLnNldFNob3dQcmludE1hcmdpbihmYWxzZSk7XHJcblxyXG4gICAgICAgIHNlc3Npb24uc2V0TW9kZSgnYWNlL21vZGUvaHRtbCcpO1xyXG4gICAgICAgIHNlc3Npb24uc2V0VXNlV3JhcE1vZGUodHJ1ZSk7XHJcblxyXG4gICAgICAgIHNlc3Npb24ub24oJ2NoYW5nZUFubm90YXRpb24nLCBmaWx0ZXJBbm5vdGF0aW9uKTtcclxuICAgICAgICBzZXNzaW9uLm9uKCdjaGFuZ2UnLCB1cGRhdGUpO1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZWRpdG9yOnZhbHVlVXBkYXRlJywgdXBkYXRlU2Vzc2lvbik7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgaGlkZGVuIEhUTUwgaW5wdXQgd2l0aCBsYXRlc3QgY29udGVudCBmcm9tIEFjZSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJGlucHV0LnZhbHVlID0gc2Vzc2lvbi5nZXRWYWx1ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdXBkYXRlU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZXNzaW9uLnNldFZhbHVlKCRpbnB1dC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0aWFsaXNlKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIEtFWV9FU0MgPSAyNztcclxuICAgIHZhciAkZWRpdG9yLCAkaWZyYW1lO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIHRoZSB1c2VyIGhhcyBrZXllZCBgRVNDYCB0byB0cmlnZ2VyIHRoZSBlZGl0b3IgY2xvc2luZy5cclxuICAgICAqL1xyXG4gICAgdmFyIGNoZWNrS2V5UHJlc3NGb3JIaWRlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlfRVNDKSB7XHJcbiAgICAgICAgICAgIGhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTGF1bmNoZXMgdGhlIG1lZGl1bSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBoaWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbmRNZXNzYWdlKHsgYWN0aW9uOiAnZGVzdHJveScgfSk7XHJcblxyXG4gICAgICAgICRlZGl0b3Iuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjaGVja0tleVByZXNzRm9ySGlkZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGlzZXMgTWVkaXVtIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIGluaXRpYWxpc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJGVkaXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0b3ItbWVkaXVtJyk7XHJcbiAgICAgICAgJGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXRvci1pbnB1dCcpO1xyXG4gICAgICAgICRpZnJhbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZWRpdG9yLW1lZGl1bS1pZnJhbWUnKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxhdW5jaC1tZWRpdW0tZWRpdG9yJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNlaXZlZCBhIG1lc3NhZ2UgZnJvbSB0aGUgaWZyYW1lIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIG9uTWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUuZGF0YS5hY3Rpb24gPT09ICdjbG9zZScpIHtcclxuICAgICAgICAgICAgJGlucHV0LnZhbHVlID0gZS5kYXRhLnZhbHVlO1xyXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2VkaXRvcjp2YWx1ZVVwZGF0ZScpKTtcclxuXHJcbiAgICAgICAgICAgIGhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSBpZnJhbWUuXHJcbiAgICAgKi9cclxuICAgIHZhciBzZW5kTWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICAkaWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkobXNnKSwgJyonKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXVuY2hlcyB0aGUgbWVkaXVtIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIHNob3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjaGVja0tleVByZXNzRm9ySGlkZSk7XHJcblxyXG4gICAgICAgIC8vIHNlbmQgaW5mb3JtYXRpb24gdG8gaWZyYW1lLlxyXG4gICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgYWN0aW9uOiAnaW5pdGlhbGlzZScsXHJcbiAgICAgICAgICAgIHZhbHVlOiAkaW5wdXQudmFsdWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJGVkaXRvci5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICB9O1xyXG5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0aWFsaXNlKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25NZXNzYWdlKTtcclxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
