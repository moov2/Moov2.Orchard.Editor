/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

window.Editor = window.Editor || {
    plugins: [],
    instances: []
};
window.Editor.plugins.push({
    action: 'ace',
    init: true,
    exec: function (instance) {
        var editor, session, $input;

        /**
         * Add provided media to editor, dictated by current ace editor selection state.
         */
        var addMedia = function (e) {
            if (!e || !e.detail || !e.detail.mediaItems) {
                return;
            }

            var alt, cursorPosition, line, url;

            for (var i = 0; i < e.detail.mediaItems.length; i++) {
                switch (e.detail.mediaItems[i].contentType.toLowerCase()) {
                    case 'document':
                        insertDocument(e.detail.mediaItems[i]);
                        break;
                    case 'image':
                        insertImage(e.detail.mediaItems[i]);
                        break;
                }
            }
        };

        /**
         * Filters out unwanted annotations (e.g. warning about doctype) due to common
         * case is the HTML being edited is not a full HTML document but a piece of HTML.
         */
        var filterAnnotation = function () {
            var annotations = session.getAnnotations() || [], i = len = annotations.length;

            while (i--) {
                if (/doctype first\. Expected/.test(annotations[i].text)) {
                    annotations.splice(i, 1);
                }
            }

            if (len > annotations.length) {
                session.setAnnotations(annotations);
            }
        };

        /**
         * Returns textarea that needs to get turned into Ace editor.
         */
        var getTextArea = function () {
            return instance.$el.querySelector('.js-editor-code > textarea');
        };

        /**
         * Initialises Ace editor.
         */
        var init = function () {
            editor = ace.edit(getTextArea().id);
            session = editor.getSession();

            $input = instance.$el.querySelector('.editor-input');

            editor.setTheme('ace/theme/monokai');
            editor.setShowPrintMargin(false);
            editor.$blockScrolling = Infinity;

            session.setMode('ace/mode/html');
            session.setUseWrapMode(true);

            session.on('changeAnnotation', filterAnnotation);
            session.on('change', update);

            $input.addEventListener('change', updateSession);
            instance.$el.addEventListener('editor:valueUpdate', updateSession);
            instance.$el.addEventListener('editor:addMedia', addMedia);
        };

        /**
         * Inserts hyperlink for document.
         */
        var insertDocument = function(asset) {
            var cursorPosition = editor.selection.getRange().start,
                line = editor.session.getLine(cursorPosition.row);

            // inserting media URL between two quotes
            if (line.substr(cursorPosition.column - 5, 5).toLowerCase() === 'href="') {
                editor.insert(asset.resource);
                return;
            }

            // inserting media URL with quotes
            if (line.substr(cursorPosition.column - 4, 4).toLowerCase() === 'href=') {
                editor.insert('"' + asset.resource + '"');
                return;
            }

            // ensure that the current cursor position warrants a complete anchor HTML
            // tag instead of the URL.
            var character = line.substr(cursorPosition.column - 1, 1).toLowerCase()

            if (character === '>' || character === '' || character === ' ') {
                editor.insert('<a href="' + asset.resource + '" title="' + asset.alternateText + '" class="" />\n');
                return;
            }

            editor.insert(asset.resource);        
        }

        /**
         * Inserts an image at the current cursor position.
         */
        var insertImage = function (image) {
            var cursorPosition = editor.selection.getRange().start,
                line = editor.session.getLine(cursorPosition.row);

            // inserting media URL between two quotes
            if (line.substr(cursorPosition.column - 5, 5).toLowerCase() === 'src="') {
                editor.insert(image.resource);
                return;
            }

            // inserting media URL with quotes
            if (line.substr(cursorPosition.column - 4, 4).toLowerCase() === 'src=') {
                editor.insert('"' + image.resource + '"');
                return;
            }

            // inserting media as an inline style
            if (line.substr(cursorPosition.column - 4, 4).toLowerCase() === 'url(') {
                editor.insert(image.resource);
                return;
            }

            // ensure that the current cursor position warrants a complete img HTML
            // tag instead of the URL.
            var character = line.substr(cursorPosition.column - 1, 1).toLowerCase()

            if (character === '>' || character === '' || character === ' ') {
                editor.insert('<img src="' + image.resource + '" alt="' + image.alternateText + '" class="" />\n');
                return;
            }

            editor.insert(image.resource);
        };

        /**
         * Updates hidden HTML input with latest content from Ace editor.
         */
        var update = function () {
            $input.value = session.getValue();
        };

        var updateSession = function () {
            session.setValue($input.value);
        };

        init();
    }
});
/**
 * Editor can be toggled between code / visual editor.
 */

window.Editor.plugins.push({
    action: 'context',
    init: true,
    exec: function (instance) {
        var CSS_CODE_EDITOR = 'is-code-editor',
            CSS_VISUAL_EDITOR = 'is-visual-editor',
            $visualIFrame = instance.$el.querySelector('.js-editor-visual-iframe');

        /**
         * Returns the type of content
         */
        var getContentType = function () {
            return document.querySelector('.js-editor-content-type').value;
        };

        var sendMessage = function (msg) {
            $visualIFrame.contentWindow.postMessage(JSON.stringify(msg), '*');
        };

        var toggleCodeEditor = function () {
            instance.$el.classList.remove(CSS_VISUAL_EDITOR);
            instance.$el.classList.add(CSS_CODE_EDITOR);

            instance.$el.dispatchEvent(new Event('editor:valueUpdate'));
        };

        /**
         * Displays visual editor.
         */
        var toggleVisualEditor = function () {
            // send information to iframe.
            var message = {
                action: 'update',
                value: instance.$input.value,
                mediaPath: getContentType(),
                id: instance.id
            };

            $visualIFrame.contentWindow.postMessage(JSON.stringify(message), '*');

            instance.$el.classList.remove(CSS_CODE_EDITOR);
            instance.$el.classList.add(CSS_VISUAL_EDITOR);
        };


        if (instance.$el.classList.contains(CSS_CODE_EDITOR)) {
            toggleVisualEditor();
            return;
        }

        toggleCodeEditor();
    }
});
/**
 * Switches editor between fullscreen and normal.
 */

window.Editor.plugins.push({
    action: 'toggle-fullscreen',
    init: false,
    exec: function (instance) {
        var CSS_FULLSCREEN = 'is-fullscreen',
            KEY_ESC = 27;

        var toggleFullscreen = function (e) {
            if (e && e.keyCode !== KEY_ESC) {
                return;
            }
    
            if (instance.$el.classList.contains(CSS_FULLSCREEN)) {
                instance.$el.classList.remove(CSS_FULLSCREEN);
    
                document.querySelector('html').style.overflow = '';
                window.removeEventListener('keydown', toggleFullscreen);
                return;
            }
    
            instance.$el.classList.add(CSS_FULLSCREEN);
            document.querySelector('html').style.overflow = 'hidden';
    
            window.addEventListener('keydown', toggleFullscreen);
        };

        toggleFullscreen();
    }
});
/**
 * Inserts media into the editor from the Orchard media library.
 */

window.Editor.plugins.push({
    action: 'insert-media',
    init: false,
    exec: function (instance) {
        var adminIndex = location.href.toLowerCase().indexOf("/admin/"),
            cachedScrollPosition = 0;

        if (adminIndex === -1) {
            return;
        }

        $.colorbox({
            href: location.href.substr(0, adminIndex) + "/Admin/Orchard.MediaLibrary?dialog=true",
            iframe: true,
            reposition: true,
            width: '90%',
            height: '90%',
            onLoad: function () {
                cachedScrollPosition = $('html').scrollTop();
                // hide the scrollbars from the main window
                $('html, body').css('overflow', 'hidden');
            },
            onClosed: function () {
                var selectedData = $.colorbox.selectedData;

                $('html, body').css('overflow', '');
                $('html').scrollTop(cachedScrollPosition);

                if(!selectedData || selectedData.length === 0) {
                    return;
                }
                
                instance.$el.dispatchEvent(new CustomEvent('editor:addMedia', {
                    detail: {
                        mediaItems: selectedData
                    }
                }));
            }
        });
    }
});
/**
 * Editor can be resized to custom height.
 */

window.Editor.plugins.push({
    action: 'resize',
    init: true,
    exec: function (instance) {
        var initialY, initialHeight,
            $resizer = instance.$el.querySelector('.js-editor-resizer'),
            $visualIFrame = instance.$el.querySelector('.js-editor-visual-iframe');
        
        var dispose = function () {
            window.removeEventListener('mousemove', onDrag);
            window.removeEventListener('mouseup', dispose);
            $visualIFrame.contentWindow.removeEventListener('mousemove', onIFrameDrag);
            $visualIFrame.contentWindow.removeEventListener('mouseup', dispose);
        };

        var onDrag = function (e) {
            instance.$el.style.height = (initialHeight + (e.clientY - initialY)) + 'px';
        };

        var onIFrameDrag = function (e) {
            var boundingClientRect = $visualIFrame.getBoundingClientRect(),
                evt = new CustomEvent('mousemove', { bubbles: true, cancelable: false });

            evt.clientX = e.clientX + boundingClientRect.left;
            evt.clientY = e.clientY + boundingClientRect.top;

            $visualIFrame.dispatchEvent(evt);
        };

        $resizer.addEventListener('mousedown', function (e) {
            initialY = e.clientY;
            initialHeight = instance.$el.offsetHeight;

            window.addEventListener('mousemove', onDrag);
            window.addEventListener('mouseup', dispose);
            $visualIFrame.contentWindow.addEventListener('mousemove', onIFrameDrag);
            $visualIFrame.contentWindow.addEventListener('mouseup', dispose);
        });
    }
});
(function () {
    var editorInstance = function ($el) {
        var state = {
            $el: $el,
            id: $el.getAttribute('data-id')
        };

        /**
         * User has clicked an action within the toolbar.
         */
        var handleAction = function (e) {
            var action = e.currentTarget.getAttribute('data-action'),
                plugins = window.Editor.plugins;

            for (var i = 0; i < plugins.length; i++) {
                if (plugins[i].action === action) {
                    plugins[i].exec(state);
                    return;
                }
            }
        }

        /**
         * Initialises Medium editor.
         */
        var init = function () {
            state.$input = $el.querySelector('.editor-input');

            var $actions = $el.querySelectorAll('.js-toolbar-btn');

            for (var i = 0; i < $actions.length; i++) {
                $actions[i].addEventListener('click', handleAction);
            }

            window.addEventListener('message', onMessage);

            // loop over plugins and execute any that are flagged to
            // exec on initialise.
            for (var i = 0; i < window.Editor.plugins.length; i++) {
                if (window.Editor.plugins[i].init) {
                    window.Editor.plugins[i].exec(state);
                }
            }
        };

        /**
         * Received a message from the iframe editor.
         */
        var onMessage = function (e) {
            if (e.data.id !== state.id) {
                return;
            }

            if (e.data.action === 'update') {
                state.$input.value = html_beautify ? html_beautify(e.data.value, { wrap_line_length: 0 }) : e.data.value;
                $el.dispatchEvent(new Event('editor:valueUpdate'));
            }
        };

        init();
    }

    /**
     * Initialises instances of the Ace editor.
     */
    var initialise = function () {
        var $editors = document.querySelectorAll('.js-editor');

        for (var i = 0; i < $editors.length; i++) {
            editorInstance($editors[i]);
        }
    };

    document.addEventListener('DOMContentLoaded', initialise);
})();
//# sourceMappingURL=data:application/json;base64,
