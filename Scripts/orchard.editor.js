/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var editor, session, $input;

    /**
     * Filters out unwanted annotations (e.g. warning about doctype) due to common
     * case is the HTML being edited is not a full HTML document but a piece of HTML.
     */
    var filterAnnotation = function () {
        var annotations = session.getAnnotations() || [], i = len = annotations.length;

        while (i--) {
            if (/doctype first\. Expected/.test(annotations[i].text)) {
                annotations.splice(i, 1);
            }
        }

        if (len > annotations.length) {
            session.setAnnotations(annotations);
        }
    };

    /**
     * Initialises Ace editor.
     */
    var initialise = function () {
        editor = ace.edit('editor');
        session = editor.getSession();

        //var beautify = ace.require('ace/ext/beautify');
        //beautify.beautify(session);

        $input = document.querySelector('.editor-input');

        editor.setTheme('ace/theme/monokai');
        editor.setShowPrintMargin(false);

        session.setMode('ace/mode/html');
        session.setUseWrapMode(true);

        session.on('changeAnnotation', filterAnnotation);
        session.on('change', update);

        window.addEventListener('editor:valueUpdate', updateSession);
    };
    
    /**
     * Updates hidden HTML input with latest content from Ace editor.
     */
    var update = function () {
        $input.value = session.getValue();
    };

    var updateSession = function () {
        session.setValue($input.value);
    };

    document.addEventListener('DOMContentLoaded', initialise);
})();
(function () {
    var KEY_ESC = 27;
    var $editor, $iframe;

    /**
     * Checks if the user has keyed `ESC` to trigger the editor closing.
     */
    var checkKeyPressForHide = function (e) {
        if (e.keyCode === KEY_ESC) {
            hide();
        }
    };

    /**
     * Returns path for storing media.
     */
    var getMediaPath = function () {
        return document.querySelector('#Body_MediaPath').value;
    };

    /**
     * Launches the medium editor.
     */
    var hide = function () {
        sendMessage({ action: 'destroy' });

        $editor.style.display = 'none';

        window.removeEventListener('keydown', checkKeyPressForHide);
    };

    /**
     * Initialises Medium editor.
     */
    var initialise = function () {
        $editor = document.querySelector('.js-editor-medium');
        $input = document.querySelector('.editor-input');
        $iframe = document.querySelector('.js-editor-medium-iframe');

        document.querySelector('.js-launch-medium-editor').addEventListener('click', show);
    };

    /**
     * Received a message from the iframe editor.
     */
    var onMessage = function (e) {
        if (e.data.action === 'close') {
            $input.value = html_beautify ? html_beautify(e.data.value) : e.data.value;
            window.dispatchEvent(new Event('editor:valueUpdate'));

            hide();
        }
    };

    /**
     * Sends a message to the iframe.
     */
    var sendMessage = function (msg) {
        $iframe.contentWindow.postMessage(JSON.stringify(msg), '*');
    };

    /**
     * Launches the medium editor.
     */
    var show = function () {
        window.addEventListener('keydown', checkKeyPressForHide);

        // send information to iframe.
        sendMessage({
            action: 'initialise',
            value: $input.value,
            mediaPath: getMediaPath()
        });

        $editor.style.display = '';
    };

    document.addEventListener('DOMContentLoaded', initialise);
    window.addEventListener('message', onMessage);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yY2hhcmQuZWRpdG9yLmpzIiwib3JjaGFyZC5hY2UuanMiLCJvcmNoYXJkLm1lZGl1bS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im9yY2hhcmQuZWRpdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGVkaXRvciwgc2Vzc2lvbiwgJGlucHV0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlsdGVycyBvdXQgdW53YW50ZWQgYW5ub3RhdGlvbnMgKGUuZy4gd2FybmluZyBhYm91dCBkb2N0eXBlKSBkdWUgdG8gY29tbW9uXHJcbiAgICAgKiBjYXNlIGlzIHRoZSBIVE1MIGJlaW5nIGVkaXRlZCBpcyBub3QgYSBmdWxsIEhUTUwgZG9jdW1lbnQgYnV0IGEgcGllY2Ugb2YgSFRNTC5cclxuICAgICAqL1xyXG4gICAgdmFyIGZpbHRlckFubm90YXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFubm90YXRpb25zID0gc2Vzc2lvbi5nZXRBbm5vdGF0aW9ucygpIHx8IFtdLCBpID0gbGVuID0gYW5ub3RhdGlvbnMubGVuZ3RoO1xyXG5cclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIGlmICgvZG9jdHlwZSBmaXJzdFxcLiBFeHBlY3RlZC8udGVzdChhbm5vdGF0aW9uc1tpXS50ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGVuID4gYW5ub3RhdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb24uc2V0QW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXNlcyBBY2UgZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICB2YXIgaW5pdGlhbGlzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBlZGl0b3IgPSBhY2UuZWRpdCgnZWRpdG9yJyk7XHJcbiAgICAgICAgc2Vzc2lvbiA9IGVkaXRvci5nZXRTZXNzaW9uKCk7XHJcblxyXG4gICAgICAgIC8vdmFyIGJlYXV0aWZ5ID0gYWNlLnJlcXVpcmUoJ2FjZS9leHQvYmVhdXRpZnknKTtcclxuICAgICAgICAvL2JlYXV0aWZ5LmJlYXV0aWZ5KHNlc3Npb24pO1xyXG5cclxuICAgICAgICAkaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWRpdG9yLWlucHV0Jyk7XHJcblxyXG4gICAgICAgIGVkaXRvci5zZXRUaGVtZSgnYWNlL3RoZW1lL21vbm9rYWknKTtcclxuICAgICAgICBlZGl0b3Iuc2V0U2hvd1ByaW50TWFyZ2luKGZhbHNlKTtcclxuXHJcbiAgICAgICAgc2Vzc2lvbi5zZXRNb2RlKCdhY2UvbW9kZS9odG1sJyk7XHJcbiAgICAgICAgc2Vzc2lvbi5zZXRVc2VXcmFwTW9kZSh0cnVlKTtcclxuXHJcbiAgICAgICAgc2Vzc2lvbi5vbignY2hhbmdlQW5ub3RhdGlvbicsIGZpbHRlckFubm90YXRpb24pO1xyXG4gICAgICAgIHNlc3Npb24ub24oJ2NoYW5nZScsIHVwZGF0ZSk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlZGl0b3I6dmFsdWVVcGRhdGUnLCB1cGRhdGVTZXNzaW9uKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBoaWRkZW4gSFRNTCBpbnB1dCB3aXRoIGxhdGVzdCBjb250ZW50IGZyb20gQWNlIGVkaXRvci5cclxuICAgICAqL1xyXG4gICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkaW5wdXQudmFsdWUgPSBzZXNzaW9uLmdldFZhbHVlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB1cGRhdGVTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlc3Npb24uc2V0VmFsdWUoJGlucHV0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXRpYWxpc2UpO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgS0VZX0VTQyA9IDI3O1xyXG4gICAgdmFyICRlZGl0b3IsICRpZnJhbWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlIHVzZXIgaGFzIGtleWVkIGBFU0NgIHRvIHRyaWdnZXIgdGhlIGVkaXRvciBjbG9zaW5nLlxyXG4gICAgICovXHJcbiAgICB2YXIgY2hlY2tLZXlQcmVzc0ZvckhpZGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IEtFWV9FU0MpIHtcclxuICAgICAgICAgICAgaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHBhdGggZm9yIHN0b3JpbmcgbWVkaWEuXHJcbiAgICAgKi9cclxuICAgIHZhciBnZXRNZWRpYVBhdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNCb2R5X01lZGlhUGF0aCcpLnZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExhdW5jaGVzIHRoZSBtZWRpdW0gZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICB2YXIgaGlkZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZW5kTWVzc2FnZSh7IGFjdGlvbjogJ2Rlc3Ryb3knIH0pO1xyXG5cclxuICAgICAgICAkZWRpdG9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2hlY2tLZXlQcmVzc0ZvckhpZGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpc2VzIE1lZGl1bSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBpbml0aWFsaXNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRlZGl0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZWRpdG9yLW1lZGl1bScpO1xyXG4gICAgICAgICRpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lZGl0b3ItaW5wdXQnKTtcclxuICAgICAgICAkaWZyYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVkaXRvci1tZWRpdW0taWZyYW1lJyk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sYXVuY2gtbWVkaXVtLWVkaXRvcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvdyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVjZWl2ZWQgYSBtZXNzYWdlIGZyb20gdGhlIGlmcmFtZSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLmRhdGEuYWN0aW9uID09PSAnY2xvc2UnKSB7XHJcbiAgICAgICAgICAgICRpbnB1dC52YWx1ZSA9IGh0bWxfYmVhdXRpZnkgPyBodG1sX2JlYXV0aWZ5KGUuZGF0YS52YWx1ZSkgOiBlLmRhdGEudmFsdWU7XHJcbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZWRpdG9yOnZhbHVlVXBkYXRlJykpO1xyXG5cclxuICAgICAgICAgICAgaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhIG1lc3NhZ2UgdG8gdGhlIGlmcmFtZS5cclxuICAgICAqL1xyXG4gICAgdmFyIHNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgICRpZnJhbWUuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtc2cpLCAnKicpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExhdW5jaGVzIHRoZSBtZWRpdW0gZWRpdG9yLlxyXG4gICAgICovXHJcbiAgICB2YXIgc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGNoZWNrS2V5UHJlc3NGb3JIaWRlKTtcclxuXHJcbiAgICAgICAgLy8gc2VuZCBpbmZvcm1hdGlvbiB0byBpZnJhbWUuXHJcbiAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBhY3Rpb246ICdpbml0aWFsaXNlJyxcclxuICAgICAgICAgICAgdmFsdWU6ICRpbnB1dC52YWx1ZSxcclxuICAgICAgICAgICAgbWVkaWFQYXRoOiBnZXRNZWRpYVBhdGgoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkZWRpdG9yLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgIH07XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXRpYWxpc2UpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
