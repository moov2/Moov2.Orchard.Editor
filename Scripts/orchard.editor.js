/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function () {
    var editorInstance = function ($el) {
        var editor, session, $input;

        /**
         * Filters out unwanted annotations (e.g. warning about doctype) due to common
         * case is the HTML being edited is not a full HTML document but a piece of HTML.
         */
        var filterAnnotation = function () {
            var annotations = session.getAnnotations() || [], i = len = annotations.length;

            while (i--) {
                if (/doctype first\. Expected/.test(annotations[i].text)) {
                    annotations.splice(i, 1);
                }
            }

            if (len > annotations.length) {
                session.setAnnotations(annotations);
            }
        };

        /**
         * Returns textarea that needs to get turned into Ace editor.
         */
        var getTextArea = function () {
            return $el.querySelector('.editor--ace > textarea');
        };

        /**
         * Initialises Ace editor.
         */
        var init = function () {
            editor = ace.edit(getTextArea().id);
            session = editor.getSession();

            $input = $el.querySelector('.editor-input');

            editor.setTheme('ace/theme/monokai');
            editor.setShowPrintMargin(false);

            session.setMode('ace/mode/html');
            session.setUseWrapMode(true);

            session.on('changeAnnotation', filterAnnotation);
            session.on('change', update);

            window.addEventListener('editor:valueUpdate', updateSession);
        };

        /**
         * Updates hidden HTML input with latest content from Ace editor.
         */
        var update = function () {
            $input.value = session.getValue();
        };

        var updateSession = function () {
            session.setValue($input.value);
        };

        init();
    }

    /**
     * Initialises instances of the Ace editor.
     */
    var initialise = function () {
        var $editors = document.querySelectorAll('.js-editor');

        for (var i = 0; i < $editors.length; i++) {
            editorInstance($editors[i]);
        }
    };

    document.addEventListener('DOMContentLoaded', initialise);
})();
(function () {
    var editorInstance = function ($el) {
        var $editor, $html, $iframe, $input;

        /**
         * Returns the type of content
         */
        var getContentType = function () {
            return document.querySelector('.js-editor-content-type').value;
        };

        /**
         * Gets the `state`, which is a text representation of what the
         * user is editing.
         */
        var getState = function () {
            var $title = document.querySelector('#Title_Title'),
                $url = document.querySelector('#AutoroutePart_CurrentUrl'),
                contentType = getContentType(),
                state = '';

            if ($title) {
                state += ($url && $url.value) ? '<a href="/' + $url.value + '" target="_blank" title="View current page">' + $title.value + '</a>' : $title.value;
            } else {
                return 'HTML Element within Layout'
            }

            if (contentType && contentType !== 'LayoutElement') {
                state += ' (' + contentType + ')';
            }

            return state || 'Unknown';
        }

        /**
         * Launches the medium editor.
         */
        var hide = function () {
            sendMessage({ action: 'destroy' });

            window.removeEventListener('message', onMessage);

            $html.style.overflow = '';

            $editor.style.display = 'none';
        };

        /**
         * Initialises Medium editor.
         */
        var init = function () {
            $editor = $el.querySelector('.js-editor-medium');
            $input = $el.querySelector('.editor-input');
            $iframe = $el.querySelector('.js-editor-medium-iframe');
            $html = document.querySelector('html');

            $el.querySelector('.js-launch-medium-editor').addEventListener('click', show);
        };

        /**
         * Received a message from the iframe editor.
         */
        var onMessage = function (e) {
            if (e.data.action === 'apply') {
                $input.value = html_beautify ? html_beautify(e.data.value, { wrap_line_length: 0 }) : e.data.value;
                window.dispatchEvent(new Event('editor:valueUpdate'));
            }

            if (e.data.action === 'apply' || e.data.action === 'discard') {
                hide();
            }
        };

        /**
         * Sends a message to the iframe.
         */
        var sendMessage = function (msg) {
            $iframe.contentWindow.postMessage(JSON.stringify(msg), '*');
        };

        /**
         * Launches the medium editor.
         */
        var show = function () {
            // send information to iframe.
            sendMessage({
                action: 'initialise',
                value: $input.value,
                mediaPath: getContentType(),
                state: getState()
            });

            window.addEventListener('message', onMessage);

            $html.style.overflow = 'hidden';
            $editor.style.display = '';
        };

        init()
    }


    /**
     * Initialises instances of the Ace editor.
     */
    var initialise = function () {
        var $editors = document.querySelectorAll('.js-editor');

        for (var i = 0; i < $editors.length; i++) {
            editorInstance($editors[i]);
        }
    };

    document.addEventListener('DOMContentLoaded', initialise);

})();
//# sourceMappingURL=data:application/json;base64,
